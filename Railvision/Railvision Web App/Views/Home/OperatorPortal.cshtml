@{
    ViewData["Title"] = "Operator Portal";
    Layout = "_Layout";
}

<div class="container-fluid px-0 position-relative" style="height: 100vh;">
    <div class="row gx-0 h-100">
        <div class="col-12 h-100">
            <div id="map" style="height: 470px;"></div>

            <div class="speed-box">
                <div>Train ID: <span id="currentTrainId">-</span></div>
                <div>Speed: <span id="currentSpeed">-</span> km/h</div>
            </div>

            <div class="search-box position-fixed" style="top: 80px; left: 20px; z-index: 1000;">
                <input type="text" class="form-control" id="trainSearch"
                       placeholder="Enter Train ID" style="width: 200px;">
            </div>

            <div class="connection-status position-fixed" style="bottom: 35px; right: 870px; z-index: 2000;">
                <span id="connectionStatus" class="badge bg-success">Connected</span>
                <span class="status-text text-light ms-2">Real-time Reporting</span>
                <small class="operator-name text-light d-block mt-1">
                    Operator: @(Context.Session.GetString("Username") ?? "Unknown Operator")
                </small>
            </div>

            <div id="temporaryAlerts" class="position-fixed" style="top: 20px; right: 20px; z-index: 3000; max-width: 350px;"></div>
        </div>
    </div>

    <div class="info-panel">
        <h3>Train Tracking</h3>
        <p>Status: <span id="status" class="status-indicator">◌ Connecting...</span></p>
        <p>Last Update: <span id="lastUpdated">-</span></p>
        <p>Coordinates: <span id="coordinates">-</span></p>
        <div class="legend">
            <div><i class="legend-marker train"></i> Railway Station</div>
            <div><i class="legend-marker crossing"></i> Crossing</div>
            <div><i class="legend-marker live"></i> Live Train</div>
        </div>
    </div>
    <div class="yolo-panel" style="position: absolute ; right: 230px; margin-top: -390px; background: rgba(0,0,0,0.5); border-radius: 5px; padding: 5px; width: 260px; height: 270px; z-index: 2100;">
        <h5 style="color: #fff;">Train's Eye View Feed</h5>
        <img id="Stream" width="250" height="200" style="border-radius: 8px; background: #222; border: 2px solid #00ff88;" alt="Stream" />
        <div id="yoloStatus" style="font-size: 0.9em; margin-top: 4px;">Connecting...</div>
    </div>
    <div class="eta-panel position-fixed" style="top: 270px; right: 10px; z-index: 1100; background: rgba(0, 0, 0, 0.3); color: #fff; border-radius: 8px; padding: 10px 14px; width: 270px; min-height: unset; height: auto; box-shadow: 0 4px 16px rgba(0,0,0,0.3);">
        <h5>ETA Calculator</h5>
        <form id="etaForm" autocomplete="off">
            <div class="mb-1">
                <label class="form-label">Train ID</label>
                <input type="text" class="form-control" id="etaTrainId" required readonly>
            </div>
            <div class="mb-1">
                <label class="form-label">Current Position</label>
                <input type="text" class="form-control" id="etaCurrentPosition" readonly>
            </div>
            <div class="mb-1">
                <label class="form-label">Destination Station</label>
                <input list="stationList" class="form-control" id="etaDestination" placeholder="Type or select station" required>
                <datalist id="stationList"></datalist>
            </div>
            <div class="mb-1">
                <label class="form-label">Current Speed (km/h)</label>
                <input type="text" class="form-control" id="etaCurrentSpeed" readonly>
            </div>
            <button type="button" class="btn btn-success w-100" id="calculateEtaBtn">Calculate ETA</button>
        </form>
        <div class="mt-3" id="etaResult" style="font-size:1.1em;"></div>
    </div>

    <!-- Incident Reporting Button -->
    <button class="btn btn-danger position-fixed"
            style="top: 560px; right: 560px; z-index: 2000;"
            data-bs-toggle="modal"
            data-bs-target="#incidentModal">
        <i class="fas fa-exclamation-triangle"></i> Report Incident
    </button>

    <!-- Incident Modal -->
    <div class="modal fade" id="incidentModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content bg-dark text-light">
                <div class="modal-header border-secondary">
                    <h5 class="modal-title">Report New Incident</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="incidentForm">
                        <div class="mb-3">
                            <label class="form-label">Title*</label>
                            <input type="text" class="form-control" id="incidentTitle" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description*</label>
                            <textarea class="form-control" id="incidentDescription" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Location</label>
                            <input type="text" class="form-control" id="incidentLocation" readonly>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Severity</label>
                            <select class="form-select" id="incidentSeverity">
                                <option value="Low">Low</option>
                                <option value="Medium" selected>Medium</option>
                                <option value="High">High</option>
                                <option value="Critical">Critical</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer border-secondary">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="submitIncident">Submit Report</button>
                </div>
            </div>
        </div>
    </div>

    <div id="incidentNotification" class="position-fixed" style="top: 20px; right: 20px; z-index: 3000; max-width: 350px;"></div>

    @Html.AntiForgeryToken()
</div>

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
        }

        .main-content {
            padding: 0;
            height: calc(100% - 56px - 60px);
        }

        #map {
            background-color: #1a1a1a;
            height: calc(100% - 40px);
            width: 80%;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            left: 2px;
        }

        .speed-box {
            position: fixed;
            bottom: 30px;
            left: 20px;
            background: rgba(0, 0, 0, 0.3);
            color: white;
            padding: 15px;
            border-radius: 10px;
            z-index: 1000;
        }

        .info-panel {
            position: absolute;
            height: 190px;
            top: -15px;
            right: -55px;
            transition: right 0.3s ease-in-out;
            z-index: 1000;
            background: rgba(0, 0, 0, 0.3);
            color: white;
            padding: 10px;
            border-radius: 8px;
            width: 270px;
            backdrop-filter: blur(5px);
        }

            .info-panel h3 {
                font-size: 1rem;
                margin-bottom: 8px;
            }

            .info-panel p {
                font-size: 0.85rem;
                margin-bottom: 6px;
            }

            .info-panel .legend {
                margin-top: 8px;
                padding-top: 6px;
                font-size: 0.85rem;
            }

            .info-panel .legend-marker {
                width: 12px;
                height: 12px;
                margin-right: 5px;
            }

        .status-indicator {
            font-weight: bold;
        }

            .status-indicator.connected {
                color: #00ff88;
            }

        .search-box input {
            background: rgba(255, 255, 255, 0.9);
            border: 2px solid #dee2e6;
            border-radius: 25px;
            padding: 8px 20px;
        }

        .pulsating-ping {
            position: relative !important;
            width: 40px !important;
            height: 40px !important;
        }

        .ping-circle {
            position: absolute;
            top: 50%;
            left: 50%;
            width: 16px;
            height: 16px;
            background: #00ff88;
            border-radius: 50%;
            animation: ping 1.5s infinite;
        }

        .ping-center {
            position: absolute;
            top: 50%;
            left: 50%;
            width: 8px;
            height: 8px;
            background: #00ff88;
            border-radius: 50%;
            z-index: 2;
        }

        .legend-marker {
            display: inline-block;
            width: 16px;
            height: 16px;
            margin-right: 8px;
            border-radius: 50%;
        }

            .legend-marker.train {
                background-color: dodgerblue;
            }

            .legend-marker.crossing {
                background-color: #7A4BA3;
            }

            .legend-marker.live {
                background-color: #00ff88;
            }

        .place-label {
            color: white;
            font-size: 12px;
            font-weight: bold;
            text-shadow: 1px 1px 2px black, -1px -1px 2px black;
            pointer-events: none;
            background: transparent;
            border: none;
            box-shadow: none;
        }

        .connection-status {
            background: rgba(0, 0, 0, 0.3);
            padding: 8px 15px;
            border-radius: 20px;
            backdrop-filter: blur(5px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            color: white;
        }

        #connectionStatus {
            margin-right: 8px;
            animation: pulse 1.5s infinite;
        }

        .connection-status small {
            font-size: 0.85rem;
            opacity: 0.9;
            display: block;
            margin-top: 4px;
        }

        #connectionStatus.bg-success {
            background-color: #28a745 !important;
        }

        #connectionStatus.bg-warning {
            background-color: #ffc107 !important;
        }

        #connectionStatus.bg-danger {
            background-color: #dc3545 !important;
        }

        .status-text {
            font-weight: 500;
            font-size: 0.9rem;
            vertical-align: middle;
        }

        .operator-name {
            font-size: 0.8rem;
            opacity: 0.9;
        }

        .eta-panel input, .eta-panel select {
            background: rgba(255,255,255,0.9);
            color: #222;
            border-radius: 6px;
            margin-bottom: 6px;
        }

        .eta-panel label {
            font-weight: 500;
            font-size: 0.80rem !important;
            margin-bottom: 2px !important;
        }

        .eta-panel h5 {
            margin-bottom: 8px;
            font-size: 1rem !important;
            color: #00ff88;
        }

        .eta-panel .form-control,
        .eta-panel .form-control-sm {
            font-size: 0.80em !important;
            padding: 2px 8px !important;
            height: 20px !important;
            margin-bottom: 4px !important;
        }

        .eta-panel .btn {
            font-size: 0.95em !important;
            padding: 4px 0 !important;
            min-height: 20px !important;
        }

        #etaResult {
            font-size: 0.95em !important;
            min-height: 28px !important;
            margin-top: 6px !important;
        }

        .leaflet-control-layers {
            background: rgba(0, 0, 0, 0.3) !important;
            color: white !important;
        }

        #incidentModal {
            z-index: 4000 !important;
        }

            #incidentModal .modal-dialog {
                z-index: 4001 !important;
            }

        .modal-backdrop.show {
            z-index: 3999 !important;
        }

        @@keyframes ping {
            0% {
                transform: translate(-50%, -50%) scale(0.9);
                opacity: 1;
            }

            80% {
                transform: translate(-50%, -50%) scale(3);
                opacity: 0;
            }

            100% {
                transform: translate(-50%, -50%) scale(3);
                opacity: 0;
            }
        }

        @@keyframes pulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.05);
            }

            100% {
                transform: scale(1);
            }
        }
    </style>
}

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const incidentHubConnection = new signalR.HubConnectionBuilder()
                .withUrl("/incidentHub")
                .build();

            incidentHubConnection.start().catch(err => console.error('SignalR Connection Error:', err));

            function logWagonDetachment(wagonId, details) {
                fetch('/api/WagonDetachmentLog', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        WagonId: wagonId,
                        Details: details,
                        UserName: document.querySelector('.operator-name').textContent.replace('Operator: ', ''),
                        ReportedBy: document.querySelector('.operator-name').textContent.replace('Operator: ', ''),
                        Severity: 'High',
                        Status: 'Active',
                        Actions: 'Acknowledge,Escalate',
                        Location: document.getElementById('coordinates').textContent,
                        TrainId: document.getElementById('currentTrainId').textContent
                    })
                });

                // Real-time admin notification via SignalR
                incidentHubConnection.invoke("NotifyNewIncident", {
                    Title: `Wagon Detachment: ${wagonId}`,
                    Description: details,
                    Location: document.getElementById('coordinates').textContent,
                    Severity: 'High',
                    Status: 'Active',
                    ReportedBy: document.querySelector('.operator-name').textContent.replace('Operator: ', ''),
                    ReportTime: new Date().toISOString()
                }).catch(err => console.error('SignalR invoke error:', err));
            }

            // Always show as connected for polling
            function updateConnectionStatus(text, type) {
                const statusElement = document.getElementById('connectionStatus');
                statusElement.textContent = text;
                statusElement.className = `badge bg-${type}`;
            }

            function showAlert(message, type) {
                const alert = document.createElement('div');
                alert.className = `alert alert-${type} alert-dismissible fade show`;
                alert.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                document.getElementById('incidentNotification').appendChild(alert);

                setTimeout(() => {
                    alert.classList.remove('show');
                    setTimeout(() => alert.remove(), 150);
                }, 5000);
            }

            updateConnectionStatus("Connected", "success");
            const mapContainer = document.getElementById('map');
            mapContainer.addEventListener('contextmenu', function(e) { e.preventDefault(); });

            let map;
            let layers = {};
            window.trackedTrains = {};
            let trackedTrains = window.trackedTrains;
            const layerStyles = {
                studyArea: {color: '#828282', weight: 0.5,dashArray: '10,5'},
                railways: { color: '#732600', weight: 5 },
                roads: { color: '#FFFFFF', weight: 0.3 },
                crossings: { color: '#7A4BA3', radius: 4, weight: 5 },
                landuse: { color: '#9C9C9C', fillColor: '#9C9C9C', fillOpacity: 0.7 },
                places: { radius: 4, fillColor: '#E1E1E1', color: '#686868', weight: 1 },
                railwayStations: { iconUrl: '/images/TrainstationICON.webp', iconSize: [35, 35] }
            };

            function initMap() {
                map = L.map('map', {
                    preferCanvas: true,
                    attributionControl: false,
                    zoomControl: false
                }).setView([-17.8292, 31.0522], 13);

                L.control.zoom({ position: 'topright' }).addTo(map);

                layers = {
                    studyArea: L.layerGroup(),
                    landuse: L.layerGroup(),
                    railways: L.layerGroup(),
                    roads: L.layerGroup(),
                    crossings: L.layerGroup(),
                    places: L.layerGroup(),
                    railwayStations: L.layerGroup(),
                    liveData: L.layerGroup().addTo(map)
                };

                L.control.layers(null, {
                    'Study Area': layers.studyArea,
                    'Land Use': layers.landuse,
                    'Railways': layers.railways,
                    'Roads': layers.roads,
                    'Crossings': layers.crossings,
                    'Places': layers.places,
                    'Stations': layers.railwayStations
                }, { collapsed: false }).addTo(map);
            }

            async function loadLayer(url, layerGroup, layerName) {
                try {
                    const response = await fetch(url);
                    const data = await response.json();
                    L.geoJSON(data, {
                        style: layerStyles[layerName],
                        pointToLayer: (feature, latlng) => {
                            switch(layerName) {
                                case 'railwayStations':
                                    return L.marker(latlng, {
                                        icon: L.icon(layerStyles.railwayStations)
                                    }).bindTooltip(feature.properties.name);
                                case 'places':
                                    return L.circleMarker(latlng, layerStyles.places)
                                           .bindTooltip(feature.properties.name, {
                                               permanent: true,
                                               className: 'place-label'
                                           });
                                default:
                                    return L.circleMarker(latlng, layerStyles[layerName]);
                            }
                        },
                        onEachFeature: (feature, layer) => {
                            if (layerName === 'landuse') layer.setStyle(layerStyles.landuse);
                        }
                    }).addTo(layerGroup);
                } catch(error) {
                    console.error(`Layer load error: ${layerName}`, error);
                }
            }

            async function loadAllLayers() {
                await Promise.all([
                    loadLayer('/data/study_area.geojson', layers.studyArea, 'studyArea'),
                    loadLayer('/data/harare_landuse.geojson', layers.landuse, 'landuse'),
                    loadLayer('/data/harare_railways.geojson', layers.railways, 'railways'),
                    loadLayer('/data/harare_roads.geojson', layers.roads, 'roads'),
                    loadLayer('/data/railroad_crossings.geojson', layers.crossings, 'crossings'),
                    loadLayer('/data/harare_places.geojson', layers.places, 'places'),
                    loadLayer('/data/harare_railway_station.geojson', layers.railwayStations, 'railwayStations')
                ]);
            }

            function createPulsatingMarker(latlng, trainId) {
                const container = document.createElement('div');
                container.className = 'pulsating-ping';
                container.innerHTML = `
                    <div class="ping-circle"></div>
                    <div class="ping-center"></div>
                    <div style="position: absolute; top: -20px; left: 50%; transform: translateX(-50%); color: white; font-weight: bold; text-shadow: 0 0 5px black;">${trainId}</div>`;
                const marker = L.marker(latlng, {
                    icon: L.divIcon({
                        className: 'pulsating-marker',
                        html: container,
                        iconSize: [40, 40],
                        iconAnchor: [20, 20]
                    }),
                    zIndexOffset: 1000
                });
                marker.bindPopup(`
                    <div style="text-align: center; padding: 8px;">
                        <strong>Train ID:</strong> ${trainId}<br>
                        <strong>Wagons:</strong> <span style="color: green;">Connected</span>
                    </div>
                `, {
                    permanent: true,
                    autoClose: false,
                    closeOnClick: false,
                    direction: 'top',
                    offset: [0, -20],
                    className: 'train-popup'
                }).openPopup();
                return marker;
            }

            let lastLat = null;
            let lastLng = null;
            let hasLiveConnection = false;

            async function updateLivePosition() {
                try {
                    const response = await fetch('https://api.thingspeak.com/channels/2855320/feeds.json?api_key=R3UJONMOKXA56ITC&results=1');
                    const data = await response.json();
                    const feed = data.feeds[0];
                    const trainId = 'DE10A';
                    const lat = parseFloat(feed.field1);
                    const lng = parseFloat(feed.field2);

                    // Detect coordinate change
                    let coordsChanged = false;
                    if (lastLat !== null && lastLng !== null) {
                        coordsChanged = (lat !== lastLat || lng !== lastLng);
                    }
                    lastLat = lat;
                    lastLng = lng;

                    // Only set hasLiveConnection if coordinates are valid and have changed at least once
                    if (!isNaN(lat) && !isNaN(lng) && coordsChanged) {
                        hasLiveConnection = true;
                    }

                    if (!trackedTrains[trainId]) {
                        trackedTrains[trainId] = {
                            marker: createPulsatingMarker([lat, lng], trainId).addTo(layers.liveData),
                            positions: [],
                            lastPosition: [lat, lng],
                            speed: 0,
                            lastUpdate: Date.now()
                        };
                    } else {
                        const prevPos = trackedTrains[trainId].lastPosition;
                        const distance = L.latLng([lat, lng]).distanceTo(prevPos);
                        const timeDiff = (Date.now() - trackedTrains[trainId].lastUpdate) / 3600000;
                        trackedTrains[trainId].speed = timeDiff > 0 ? (distance / 1000) / timeDiff : 0;
                        trackedTrains[trainId].marker.setLatLng([lat, lng]);
                        trackedTrains[trainId].lastPosition = [lat, lng];
                        trackedTrains[trainId].lastUpdate = Date.now();
                        map.panTo([lat, lng]);
                    }

                    document.getElementById('currentSpeed').textContent = trackedTrains[trainId].speed.toFixed(1);
                    document.getElementById('currentTrainId').textContent = trainId;
                    document.getElementById('coordinates').textContent = `${lat.toFixed(5)}, ${lng.toFixed(5)}`;
                    document.getElementById('lastUpdated').textContent = new Date().toLocaleTimeString();
                    document.getElementById('status').className = 'status-indicator connected';
                    document.getElementById('status').textContent = '✔ Live Tracking';
                } catch(error) {
                    hasLiveConnection = false;
                    console.error('Tracking error:', error);
                    document.getElementById('status').className = 'status-indicator';
                    document.getElementById('status').textContent = '⚠ Connection Error';
                }
            }

            const wagonDetachAudio = new Audio('/sounds/alert.mp3'); // Already present

            let wagons = [
                { id: 'W1', lrs: 1000 },
                { id: 'W2', lrs: 1010 },
                { id: 'W3', lrs: 1020 }
            ];
            let detachmentThreshold = 15; // meters

            let wagonSimulationActive = false;
            let wagonSimulationTimeout = null;
            let wagonRestoreTimeout = null;
            let lastDataTimestamp = null;
            let detachmentOngoing = false;
            let wagonAudioInterval = null;

            function startWagonSimulation() {
                if (wagonSimulationActive || !hasLiveConnection) return;
                wagonSimulationActive = true;
                scheduleNextDetachment(20000); // Start immediately on movement
            }

            function playWagonAudioLoop() {
                if (wagonAudioInterval) clearInterval(wagonAudioInterval);
                wagonDetachAudio.loop = false; // We'll handle looping manually for compatibility
                wagonDetachAudio.play();
                wagonAudioInterval = setInterval(() => {
                    if (detachmentOngoing && wagonSimulationActive) {
                        wagonDetachAudio.currentTime = 0;
                        wagonDetachAudio.play();
                    } else {
                        clearInterval(wagonAudioInterval);
                    }
                }, 3000); // Adjust interval to match your audio length
            }

            function stopWagonAudioLoop() {
                if (wagonAudioInterval) clearInterval(wagonAudioInterval);
                wagonDetachAudio.pause();
                wagonDetachAudio.currentTime = 0;
            }

            function updateWagonStatusPopup(status) {
                if (window.trackedTrains && trackedTrains['DE10A']) {
                    const marker = trackedTrains['DE10A'].marker;
                    marker.setPopupContent(`
                        <div style="text-align: center; padding: 8px;">
                            <strong>Train ID:</strong> DE10A<br>
                            <strong>Wagons:</strong> <span style="color: ${status === 'Connected' ? 'green' : 'red'};">${status === 'Connected' ? 'Connected' : 'Detached'}</span>
                        </div>
                    `);
                    marker.openPopup();
                }
            }

            function stopWagonSimulation() {
                wagonSimulationActive = false;
                clearTimeout(wagonSimulationTimeout);
                clearTimeout(wagonRestoreTimeout);
                detachmentOngoing = false;
                stopWagonAudioLoop();
                updateWagonStatusPopup('Connected');
            }

            function scheduleNextDetachment(delayMs) {
                if (!wagonSimulationActive) return;
                wagonSimulationTimeout = setTimeout(() => {
                    simulateDetachment();
                }, delayMs);
            }

            function showWagonDetachmentAlert(wagonId) {
                const alert = document.createElement('div');
                alert.className = 'alert alert-danger alert-dismissible fade show';
                alert.innerHTML = `
                    <strong>Wagon Detachment!</strong> Wagon ${wagonId} has detached.<br>
                    <button type="button" class="btn btn-sm btn-success me-2" onclick="acknowledgeWagonAlert('${wagonId}', this)">Acknowledge</button>
                    <button type="button" class="btn btn-sm btn-warning" onclick="escalateWagonAlert('${wagonId}', this)">Escalate</button>
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                document.getElementById('incidentNotification').appendChild(alert);
                setTimeout(() => alert.remove(), 20000);
                logWagonDetachment(wagonId, 'Wagon detached during operation');
                notifyAdminWagonStatus(wagonId, 'Detached');
            }

            window.acknowledgeWagonAlert = function(wagonId, btn) {
                btn.disabled = true;
                btn.textContent = "Acknowledged";
                const alertDiv = btn.closest('.alert');
                if (alertDiv) alertDiv.remove();
                restoreWagons();
                updateWagonStatusPopup('Connected');
                detachmentOngoing = false;
                stopWagonAudioLoop();
                // Now schedule next detachment
                if (wagonSimulationActive) scheduleNextDetachment(60 * 1000);
            };

            window.escalateWagonAlert = function(wagonId, btn) {
                btn.disabled = true;
                btn.textContent = "Escalated";
                escalateWagonDetachment(wagonId);
                const alertDiv = btn.closest('.alert');
                if (alertDiv) alertDiv.remove();
                restoreWagons();
                updateWagonStatusPopup('Connected');
                detachmentOngoing = false;
                stopWagonAudioLoop();
                // Now schedule next detachment
                if (wagonSimulationActive) scheduleNextDetachment(2 * 60 * 1000);
            };

            function escalateWagonDetachment(wagonId) {
                fetch('/Incident/Report', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        Title: `Wagon Detachment Escalation: ${wagonId}`,
                        Description: `Operator escalated detachment of wagon ${wagonId}.`,
                        Location: document.getElementById('coordinates').textContent,
                        Severity: 'High'
                    })
                });
            }
            function notifyAdminWagonStatus(wagonId, status) {
                fetch('/api/AdminWagonStatus', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ wagonId, status })
                });
            }

            function simulateDetachment() {
                if (!wagonSimulationActive || detachmentOngoing) return;
                detachmentOngoing = true;
                wagons[1].lrs = wagons[0].lrs + detachmentThreshold + 5; // Force detachment
                showWagonDetachmentAlert(wagons[1].id);
                updateWagonStatusPopup('Detached');
                playWagonAudioLoop();
            }

            function restoreWagons() {
                // Restore LRS positions to "connected"
                wagons[1].lrs = wagons[0].lrs + 10;
                wagons[2].lrs = wagons[1].lrs + 10;
            }

            // --- Integrate with live data polling ---
            const originalUpdateLivePosition = updateLivePosition;

            async function updateLivePositionWithSimulation() {
                try {
                    await originalUpdateLivePosition();
                    lastDataTimestamp = Date.now();

                    // Only start simulation if live connection and coordinates are changing
                    if (!wagonSimulationActive && hasLiveConnection) {
                        startWagonSimulation();
                    }

                    // If coordinates have not changed for 15 seconds, stop simulation
                    if (
                        wagonSimulationActive &&
                        lastDataTimestamp &&
                        Date.now() - lastDataTimestamp > 15000
                    ) {
                        stopWagonSimulation();
                    }

                } catch (error) {
                    // If error, treat as no data
                    lastDataTimestamp = null;
                    stopWagonSimulation();
                }
            }

            let liveDataInterval = null;
            if (liveDataInterval) clearInterval(liveDataInterval);
            liveDataInterval = setInterval(() => {
                updateLivePositionWithSimulation();

                // If no data for 15 seconds, stop simulation
                if (!hasLiveConnection || (lastDataTimestamp && Date.now() - lastDataTimestamp > 15000)) {
                    stopWagonSimulation();
                }
            }, 5000);


            // On page load, use the patched function
            updateLivePositionWithSimulation();

            async function init() {
                initMap();
                await loadAllLayers();
                //updateLivePosition();
                //setInterval(updateLivePosition, 5000);

                // Replace the trainSearch change event in your init() function with:
                // Inside your init() function, replace the trainSearch event handler with this:
                document.getElementById('trainSearch').addEventListener('change', function() {
                    const trainId = this.value.trim();
                    const train = trackedTrains[trainId];
                    const notificationDiv = document.getElementById('incidentNotification');
                    // Remove any previous alerts
                    notificationDiv.innerHTML = '';
                    if (train && train.marker) {
                        map.flyTo(train.marker.getLatLng(), 15);
                        // Show "Train found" message
                        const alert = document.createElement('div');
                        alert.className = 'alert alert-success alert-dismissible fade show';
                        alert.innerHTML = `
                            Train ID "${trainId}" found on map.
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        `;
                        notificationDiv.appendChild(alert);
                        setTimeout(() => alert.remove(), 4000);
                    } else {
                        // Show "Train not found" message
                        const alert = document.createElement('div');
                        alert.className = 'alert alert-warning alert-dismissible fade show';
                        alert.innerHTML = `
                            Train ID "${trainId}" not found on map.
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        `;
                        notificationDiv.appendChild(alert);
                        setTimeout(() => alert.remove(), 4000);
                        // Optionally, reset map to default view
                        map.setView([-17.8292, 31.0522], 13);
                    }
                });
            }

            init();

            window.addEventListener('error', event => {
                console.error('Global error:', event.error);
                showAlert(`Application error: ${event.message}`, 'danger');
            });

            // --- ETA Panel Logic ---
            const etaTrainIdInput = document.getElementById('etaTrainId');
            const etaCurrentPositionInput = document.getElementById('etaCurrentPosition');
            const etaCurrentSpeedInput = document.getElementById('etaCurrentSpeed');
            const etaDestinationInput = document.getElementById('etaDestination');
            const etaResultDiv = document.getElementById('etaResult');
            const stationList = document.getElementById('stationList');

            let etaInterval = null;
            let lastDestination = "";

            // Lock in Train ID from search box
            document.getElementById('trainSearch').addEventListener('change', function() {
                const train = trackedTrains[this.value];
                if (train) {
                    map.flyTo(train.marker.getLatLng(), 15);
                } else {
                    // Optionally show a message: "Train not found"
                }
                etaTrainIdInput.value = this.value || 'DE10A';
                updateEtaPanel();
                clearEtaInterval();
            });

            // Update ETA panel with current data
            function updateEtaPanel() {
                const trainId = etaTrainIdInput.value || 'DE10A';
                const train = window.trackedTrains[trainId];
                if (train) {
                    const [lat, lng] = train.lastPosition || [null, null];
                    etaCurrentPositionInput.value = lat && lng ? `${lat.toFixed(5)}, ${lng.toFixed(5)}` : '-';
                    etaCurrentSpeedInput.value = train.speed ? train.speed.toFixed(1) : '-';
                }
            }
            setInterval(updateEtaPanel, 3000);

            // Populate station dropdown from loaded map data
            function populateStationList() {
                if (!window.layers || !window.layers.railwayStations) return;
                stationList.innerHTML = '';
                window.layers.railwayStations.eachLayer(layer => {
                    if (layer.feature && layer.feature.properties && layer.feature.properties.name) {
                        const opt = document.createElement('option');
                        opt.value = layer.feature.properties.name;
                        stationList.appendChild(opt);
                    }
                });
            }
            setTimeout(populateStationList, 3000);

            // Helper: Find closest index on polyline to a given latlng
            function findClosestIndex(latlng, latlngs) {
                let minDist = Infinity, minIdx = 0;
                for (let i = 0; i < latlngs.length; i++) {
                    const d = latlng.distanceTo(latlngs[i]);
                    if (d < minDist) {
                        minDist = d;
                        minIdx = i;
                    }
                }
                return minIdx;
            }

            // Main ETA calculation function
            function calculateAndDisplayETA() {
                const trainId = etaTrainIdInput.value || 'DE10A';
                const train = window.trackedTrains[trainId];
                if (!train || !train.lastPosition) {
                    etaResultDiv.textContent = "Train position unavailable.";
                    return;
                }
                const [lat, lng] = train.lastPosition;
                const speed = parseFloat(etaCurrentSpeedInput.value);
                const destName = etaDestinationInput.value.trim();

                if (!destName) {
                    etaResultDiv.textContent = "Please enter a destination station.";
                    return;
                }
                if (!speed || speed < 1) {
                    etaResultDiv.textContent = "Speed too low for ETA calculation.";
                    return;
                }

                // Find destination coordinates from station list
                let destLatLng = null;
                window.layers.railwayStations.eachLayer(layer => {
                    if (layer.feature && layer.feature.properties && layer.feature.properties.name &&
                        layer.feature.properties.name.toLowerCase() === destName.toLowerCase()) {
                        destLatLng = layer.getLatLng();
                    }
                });
                if (!destLatLng) {
                    etaResultDiv.textContent = "Destination station not found on map.";
                    return;
                }

                // --- Path-based distance calculation using railway polyline ---
                let railwayLine = null;
                window.layers.railways.eachLayer(layer => {
                    if (layer instanceof L.Polyline && !railwayLine) {
                        railwayLine = layer;
                    }
                });
                if (!railwayLine) {
                    etaResultDiv.textContent = "Railway polyline not loaded.";
                    return;
                }

                const polyPoints = railwayLine.getLatLngs();
                const currentIdx = findClosestIndex(L.latLng(lat, lng), polyPoints);
                const destIdx = findClosestIndex(destLatLng, polyPoints);

                // Calculate path distance along the polyline
                let distance = 0;
                if (currentIdx < destIdx) {
                    for (let i = currentIdx; i < destIdx; i++) {
                        distance += polyPoints[i].distanceTo(polyPoints[i+1]);
                    }
                } else {
                    for (let i = currentIdx; i > destIdx; i--) {
                        distance += polyPoints[i].distanceTo(polyPoints[i-1]);
                    }
                }
                distance = distance / 1000; // meters to km

                const etaMinutes = (distance / speed) * 60;
                etaResultDiv.innerHTML = `
                    <b>Railway Path Distance:</b> ${distance.toFixed(2)} km<br>
                    <b>ETA:</b> ${etaMinutes.toFixed(1)} minutes
                `;
            }

            // Clear the ETA interval if running
            function clearEtaInterval() {
                if (etaInterval) {
                    clearInterval(etaInterval);
                    etaInterval = null;
                }
            }

            // Start dynamic ETA calculation
            document.getElementById('calculateEtaBtn').addEventListener('click', function() {
                clearEtaInterval();
                lastDestination = etaDestinationInput.value.trim();
                calculateAndDisplayETA();
                etaInterval = setInterval(() => {
                    // If destination changed, stop auto-update
                    if (etaDestinationInput.value.trim() !== lastDestination) {
                        clearEtaInterval();
                        return;
                    }
                    calculateAndDisplayETA();
                }, 5000); // update every 5 seconds
            });

            // Optional: Stop interval if destination changes manually
            etaDestinationInput.addEventListener('input', function() {
                if (this.value.trim() !== lastDestination) {
                    clearEtaInterval();
                }
            });

            // Optional: Stop interval on page unload
            window.addEventListener('beforeunload', clearEtaInterval);

            document.getElementById('submitIncident').addEventListener('click', function() {
                const coordinatesText = document.getElementById('coordinates').textContent;
                document.getElementById('incidentLocation').value = coordinatesText;

                const incident = {
                    Title: document.getElementById('incidentTitle').value,
                    Description: document.getElementById('incidentDescription').value,
                    Location: document.getElementById('incidentLocation').value,
                    Severity: document.getElementById('incidentSeverity').value
                };

                if (!incident.Title || !incident.Description) {
                    showAlert('Please fill in all required fields', 'warning');
                    return;
                }

                const submitBtn = document.getElementById('submitIncident');
                submitBtn.disabled = true;
                submitBtn.textContent = 'Submitting...';


                fetch('/Incident/Report', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(incident)
                })
                .then(async response => {
                    submitBtn.disabled = false;
                    submitBtn.textContent = 'Submit Report';
                    if (response.ok) {
                        showAlert('Incident reported successfully!', 'success');
                        document.getElementById('incidentForm').reset();
                        $('#incidentModal').modal('hide');
                    } else {
                        const errorText = await response.text();
                        showAlert('Failed to report incident: ' + errorText, 'danger');
                    }
                })
                .catch(error => {
                    submitBtn.disabled = false;
                    submitBtn.textContent = 'Submit Report';
                    showAlert('Network error: ' + error.message, 'danger');
                });
            });
        });

        document.addEventListener('DOMContentLoaded', function() {
            const yoloStream = document.getElementById('Stream');
            const yoloStatus = document.getElementById('yoloStatus');
            const streamUrl = 'https://localhost:5001/yolo_stream';

            function setYoloStatus(text, color) {
                yoloStatus.textContent = text;
                yoloStatus.style.color = color;
            }

            setYoloStatus('Connecting...', '#ffe066');

            yoloStream.src = streamUrl;
            yoloStream.onerror = function() {
                setYoloStatus('Stream error. Check backend.', '#ff4d4f');
            };
            yoloStream.onload = function() {
                setYoloStatus('Live', '#007bff');
            };

            // Only speak for these labels
            const allowedLabels = ["train", "person", "car", "debris"];

            if (!!window.EventSource) {
                const detectionSource = new EventSource('https://localhost:5001/yolo_detections');
                detectionSource.onmessage = function(event) {
                    try {
                        const detections = JSON.parse(event.data);
                        detections.forEach(det => {
                            if (det.label && allowedLabels.includes(det.label.toLowerCase())) {
                                const text = `Detected ${det.label}, ${det.distance.toFixed(1)} units away.`;
                                window.speechSynthesis.speak(new SpeechSynthesisUtterance(text));
                            }
                        });
                    } catch (e) {
                    }
                };
            }

            // Resume speech synthesis on first user interaction (required by some browsers)
            document.body.addEventListener('click', () => {
                window.speechSynthesis.resume();
            }, { once: true });
        });

    </script>
}